[gd_scene load_steps=3 format=1]

[sub_resource type="GDScript" id=1]

script/source = "extends Node2D


export var size = 500
export var color = Color(1, 1, 1)
export var border_size = 10
export var border_color = Color(0, 0, 0)

export var shrink_speed = 10.0
onready var relative_shrink_speed = shrink_speed / size
export var min_size = 75

onready var canvas = get_parent()
onready var area = get_node(\"Area2D\")


func _ready():
	set_process(true)

func _process(delta):
	# Shrink
	if size > min_size:
		size -= delta * shrink_speed
		area.set_scale(area.get_scale() - Vector2(relative_shrink_speed, relative_shrink_speed) * delta)
	
	# Check for deaths
	for ball in canvas.balls:
		if not area.overlaps_body(ball):
			ball.kill()
	
	# Update appearance
	update()

func _draw():
	draw_circle(Vector2(0, 0), size + border_size, color)
	draw_circle(Vector2(0, 0), size, border_color)
"

[sub_resource type="CircleShape2D" id=2]

custom_solver_bias = 0.0
radius = 500.0

[node name="ring" type="Node2D"]

script/script = SubResource( 1 )
size = 500
color = Color( 1, 1, 1, 1 )
border_size = 10
border_color = Color( 0, 0, 0, 1 )
shrink_speed = 10.0
min_size = 75

[node name="Area2D" type="Area2D" parent="."]

input/pickable = true
shapes/0/shape = SubResource( 2 )
shapes/0/transform = Matrix32( 1, 0, 0, 1, 0, 0 )
shapes/0/trigger = false
gravity_vec = Vector2( 0, 1 )
gravity = 98.0
linear_damp = 0.1
angular_damp = 1.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]

shape = SubResource( 2 )
trigger = false
_update_shape_index = 0


