[gd_scene load_steps=12 format=1]

[ext_resource path="res://background2.png" type="Texture" id=1]
[ext_resource path="res://aPlayer.tscn" type="PackedScene" id=2]
[ext_resource path="res://player2.png" type="Texture" id=3]
[ext_resource path="res://player3.png" type="Texture" id=4]
[ext_resource path="res://white.png" type="Texture" id=5]
[ext_resource path="res://Chipzel - Courtesy.ogg" type="AudioStream" id=6]

[sub_resource type="GDScript" id=1]

script/source = "extends Node2D


onready var shader = get_node(\"shader\").get_material()
onready var timer = get_node(\"Timer\")

# Score monitoring
var balls = []
var scores = []
var speeds = []

# Abberation
export var base_abberation = 0.005
export var distort_abberation_on = true
export var default_distorted_abberation = 0.025
export var scale_abberation = true
export var abberation_multiplier = 0.0001

# Shaking
var time = 0.0
var iteration = 0

export var shake_on = true
export var shake_roughness = 1
export var shake_speed = 64
export var default_shake_magnitude = 8
export var scale_shaking = true
export var shake_multiplier = 0.1

var shake_magnitude = default_shake_magnitude
var shaking = false

# Sparks
export var sparks_on = true
export var default_spark_amount = 16
export var default_spark_speed = 160
export var scale_sparks = true
export var spark_amount_multiplier = 0.1
export var spark_speed_multiplier = 1

func _ready():
	# Connect timer
	timer.connect(\"timeout\", self, \"_on_timeout\")
	
	# Reset abberation
	reset_abberation()
	
	# Pass spark settings to balls
	for ball in balls:
		ball.config_sparks(
			sparks_on,
			default_spark_amount,
			default_spark_speed,
			scale_sparks,
			spark_amount_multiplier,
			spark_speed_multiplier
		)
	
	# Start process
	set_process(true)

func _process(delta):
	# Fetch scores and speeds
	var count = 1
	while count <= balls.size():
		var ball = balls[count - 1]
		var speed = ball.get_linear_velocity().length()
		
		scores[count - 1] += speed * delta
		speeds[count - 1] = speed
		
		count += 1
	
	# Shaking
	time += delta
	if time >= (2 * PI):
		time = 0
	
	if shaking:
		if iteration == shake_roughness:
			set_pos(Vector2(sin(time * shake_speed) * shake_magnitude, 0))
	
	# Iteration counting
	iteration += 1
	if iteration > shake_roughness:
		iteration = 0

func _on_timeout():
	reset_abberation()
	reset_shaking()

func handle_collision(magnitude):
	\"\"\" Starts on-collision visual effects (Called by balls when they detect a collision) \"\"\"
	if distort_abberation_on:
		distort_abberation(magnitude)
	if shake_on:
		start_shaking(magnitude)
	timer.start()

func add_ball(ball):
	\"\"\" Add a ball to score tracking arrays (Called by balls) \"\"\"
	balls.append(ball)
	scores.append(0)
	speeds.append(0)

func reset_abberation():
	\"\"\" Set abberation to its default value \"\"\"
	set_abberation(base_abberation)

func set_abberation(value):
	\"\"\" Set chromatic abberation magnitude \"\"\"
	shader.set_shader_param(\"rOffset\", Vector2(value, 0))
	shader.set_shader_param(\"bOffset\", Vector2(-value, 0))

func distort_abberation(magnitude):
	\"\"\" Offsets the abberation by default_distorted_abberation and sets timer to reset it \"\"\"
	if scale_abberation:
		# Add the collision magnitude to the distortion magnitude
		magnitude *= abberation_multiplier
		set_abberation(default_distorted_abberation + magnitude)
	else:
		set_abberation(default_distorted_abberation)

func start_shaking(magnitude):
	\"\"\" Start shaking \"\"\"
	if scale_shaking:  # If we do not scale shaking, we leave the shake_magnitude as default
		# Add the collision magnitude to the shaking magnitude
		magnitude *= shake_multiplier
		shake_magnitude = default_shake_magnitude + magnitude
	shaking = true

func reset_shaking():
	\"\"\" Sets position to (0, 0) and turns off shaking \"\"\"
	set_pos(Vector2(0, 0))
	shaking = false

func get_scores():
	\"\"\" Returns an array of scores \"\"\"
	return scores

func get_speeds():
	\"\"\" Returns an array of speeds \"\"\"
	return speeds
"

[sub_resource type="CanvasItemShader" id=2]

_code = {
"fragment": "/* Color changing shader; Pulsates in specified BPM */
uniform float modifier = 0.01;
uniform float bpm = 130.0;

float f = TIME + UV.x*UV.x + UV.y*UV.y;

color c1 = tex(TEXTURE, UV);

// sin(bpm x / 3 pi) has the right frequency
float intensity = (sin(bpm / 3.0 * TIME / 3.1415) + 1.0) / 2.0;
color c2 = color(sin(f) * intensity, cos(f) * intensity, -sin(f) * intensity, 1.0);

COLOR = c1 + c2 * modifier;",
"fragment_ofs": 0,
"light": "",
"light_ofs": 0,
"vertex": "",
"vertex_ofs": 0
}

[sub_resource type="CanvasItemMaterial" id=3]

shader/shader = SubResource( 2 )
shader/shading_mode = 0
shader_param/modifier = 0.025
shader_param/bpm = 130.0

[sub_resource type="CanvasItemShader" id=4]

_code = {
"fragment": "/* Chromatic abberation shader; Doesn't support transparency */
uniform vec2 rOffset;
uniform vec2 gOffset;
uniform vec2 bOffset;

float red = texscreen(SCREEN_UV + rOffset).r;
float green = texscreen(SCREEN_UV + gOffset).g;
float blue = texscreen(SCREEN_UV + bOffset).b;

COLOR = color(red, green, blue, 1.0);",
"fragment_ofs": 0,
"light": "",
"light_ofs": 0,
"vertex": "",
"vertex_ofs": 0
}

[sub_resource type="CanvasItemMaterial" id=5]

shader/shader = SubResource( 4 )
shader/shading_mode = 0
shader_param/rOffset = Vector2( 0.005, 0 )
shader_param/gOffset = Vector2( 0, 0 )
shader_param/bOffset = Vector2( -0.005, 0 )

[node name="canvas" type="Node2D"]

script/script = SubResource( 1 )
base_abberation = 0.005
distort_abberation_on = true
default_distorted_abberation = 0.015
scale_abberation = true
abberation_multiplier = 0.0001
shake_on = true
shake_roughness = 1
shake_speed = 64
default_shake_magnitude = 4
scale_shaking = true
shake_multiplier = 0.1
sparks_on = true
default_spark_amount = 16
default_spark_speed = 160
scale_sparks = true
spark_amount_multiplier = 0.1
spark_speed_multiplier = 1

[node name="background" type="Sprite" parent="."]

material/material = SubResource( 3 )
transform/pos = Vector2( 720, 450 )
texture = ExtResource( 1 )

[node name="background1" type="Sprite" parent="."]

material/material = SubResource( 3 )
transform/pos = Vector2( 720, 450 )
texture = ExtResource( 1 )

[node name="ball1" parent="." instance=ExtResource( 2 )]

transform/pos = Vector2( 360, 450 )

[node name="ball2" parent="." instance=ExtResource( 2 )]

transform/pos = Vector2( 720, 450 )
player = 2
texture = ExtResource( 3 )

[node name="ball3" parent="." instance=ExtResource( 2 )]

transform/pos = Vector2( 1080, 450 )
player = 3
texture = ExtResource( 4 )

[node name="shader" type="Sprite" parent="."]

material/material = SubResource( 5 )
transform/pos = Vector2( 721.79, 449 )
transform/scale = Vector2( 27, 18 )
texture = ExtResource( 5 )

[node name="Timer" type="Timer" parent="."]

process_mode = 1
wait_time = 0.15
one_shot = true
autostart = false

[node name="StreamPlayer" type="StreamPlayer" parent="."]

stream/stream = ExtResource( 6 )
stream/play = false
stream/loop = true
stream/volume_db = 0.0
stream/autoplay = true
stream/paused = false
stream/loop_restart_time = 0.0
stream/buffering_ms = 500


